version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: db
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hht-network
    restart: always

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - hht-network
    restart: always

  celery_worker:
    build: .
    command: poetry run celery -A config worker -l INFO
    container_name: celery_worker
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - hht-network
    restart: always
    depends_on:
      - redis
      - db

  celery_beat:
    build: .
    command: poetry run celery -A config beat -l INFO
    container_name: celery_beat
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - hht-network
    restart: always
    depends_on:
      - redis
      - db

  web:
    build: .
    command: bash -c "poetry add gunicorn &&
                      poetry run python manage.py migrate &&
                      poetry run python manage.py collectstatic --noinput &&
                      poetry run gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    container_name: web
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - hht-network
    links:
      - db:db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/app/static
    networks:
      - hht-network
    depends_on:
      web:
        condition: service_healthy

volumes:
  postgres_data:

networks:
  hht-network:
    driver: bridge